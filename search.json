[{"title":"consul实践","url":"/2019/04/10/consul实践/"},{"title":"zookeeper实践","url":"/2019/04/10/zookeeper实践/"},{"title":"etcd实践","url":"/2019/04/10/etcd实践/"},{"title":"K8S的日志分析与监控ingress","url":"/2019/04/10/K8S的日志分析与监控ingress/"},{"title":"linux下配置代理访问谷歌","url":"/2019/04/09/linux下配置代理访问谷歌/","content":"> 背景\n\n最近在实践K8S，因为很多地方需要访问谷歌，又不想设置阿里镜像，也不想用在node中pull国内镜像再打tag，所以就想利用手里有的香港服务器作为代理使用。\n\n在MAC上和Linux上分别测试通过，特此记录一下，方便以后用于服务器curl get墙外资源或者docker等资源\n环境：mac 10.14 centos7.2\n\n> 思路\n\n利用本地的SSR客户端，连接远程SS服务之后，此时的代理客户端会有一个socket5协议的代理，但是很多时候需要转变为http代理，可以利用privoxy之类的方案转化\n\n> MAC\n\n一般安装有SSX_NG作为SSR的客户端管理。\n\n在菜单http代理设置中可以设置ip为0.0.0.0，port为1087，这个port是你在设置后面http代理是用到的。\n~~~\nexport http_proxy=http://127.0.0.1:1087\nexport https_proxy=http://127.0.0.1:1087\nexport no_proxy=localhost\n\n之后可以用于kubenetes的安装镜像和k8s\n比如：\nminikube start --docker-env http_proxy=http://192.168.99.104:1087 --docker-env https_proxy=http://192.168.99.104:1087 --docker-env no_proxy=localhost,127.0.0.1,192.168.99.0/24 --log_dir=tmp \n~~~\n> CENTOS 7\n\n~~~\n1、安装SSR\n方案一、\nit clone https://github.com/SAMZONG/gfwlist2privoxy.git\ncd gfwlist2privoxy/\nmv ssr /usr/local/bin\nchmod +x /usr/local/bin/ssr\n\nssr install\n\nssr config #配置文件路径 /usr/local/share/shadowsocksr/config.json\n\nssr start\nssr stop\nssr uninstall # 这里操作会删除/usr/local/share/shadowsocksr\n~~~\n\n方案二、\n安装electron_ssr\ngit clone https://github.com/erguotou520/electron-ssr.git\n\n不详述，两个快捷键，如果有gnome界面的话，ctrl+shift+W显示隐藏界面，ctrl+shift+B显示隐藏菜单\n\n显示菜单打开配置文件，这个直接带有http_proxy，看配置文件中的httProxyPort是什么，以后系统配置环境变量也要用这个\n配置文件中的pacPort，一般用于代理为PAC模式。然后在网络设置中可以设置。也可以和上面一样export 设置环境变量。\n\n其他设置与操作同MAC系统\n\n\n\n\n\n\n\n","tags":["linux,ssr,proxy"]},{"title":"php 实时输出运行结果","url":"/2019/04/02/php-实时输出运行结果/","content":"~~~\nset_time_limit(0);\nob_end_clean();\nob_implicit_flush();\nheader('X-Accel-Buffering: no'); // 关键是加了这一行。\necho \"something@@\";\n~~~","tags":["PHP"]},{"title":"hexo 常用命令","url":"/2019/04/02/hexo-常用命令/","content":"> 安装\n~~~\nnpm install -g hexo\nnpm update -g hexo\nhexo init \n~~~\n> 常用\n~~~\nhexo n == hexo new \"a new post\"  新建文章，最好用双引号括起来\n\nhexo g == hexo generate     生成静态文件到public文件夹\n\nhexo s == hexo server    Server at localhost:4000，根目录为public\n\nhexo d == hexo deploy   部署到远程服务里，例如github\n\nhexo p == hexo publish  新建草稿draft\n\nhexo clean     清除缓存文件\n\nhexo new page \"about\"   生成 /source/about/index.md 文件\n~~~\n> 后端\n~~~\nhexo server    默认为动态监听\n\nhexo server -s   静态模式\n\nhexo server -p 5000  指定端口\n\nhexo server -i 10.20.62.123   指定IP\n~~~\n> 文章摘要\n~~~\n方式1：在front-matter中编写\n\ndescription: \"This a digest bla bla...\" \n\n方式2\n\n在文章中插入一行  <!--more-->  以上部分为摘要\n~~~\n> 添加sitemap\n~~~\nnpm install hexo-generator-sitemap --save\n\n_config.yml\n\nsitemap:\n    path: sitemap.xml\n~~~\n> 更多\nhttps://hexo.io/zh-cn/docs/","tags":["hexo"]},{"title":"Kubernates之旅-环境篇","url":"/2019/04/02/Kubernates之旅-环境篇/","content":"> 平台\n* centos 7.2\n\n> 安装内核\n\n> 安装virtualBox\n\n~~~\nwget -q https://www.virtualbox.org/download/oracle_vbox.asc -O- | rpm --import -\n\nwget https://download.virtualbox.org/virtualbox/6.0.4/VirtualBox-6.0-6.0.4_128413_el7-1.x86_64.rpm\n\nrpm -ivh VirtualBox-6.0-6.0.4_128413_el7-1.x86_64.rpm\n~~~\n\n> 安装kubectl\n\n~~~\ncurl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl\n\nchmod +x ./kubectl\n\nmv ./kubectl /usr/local/bin/kubectl\n~~~\n\n> 安装minikube\n\n~~~\ncurl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-darwin-amd64 \\\n && chmod +x minikube\nmv minikube /usr/local/bin\n~~~\n> 设置代理安装单节点集群\n~~~\n#将本地SSR开启http代理，设置IP：0.0.0.0\n#参考：https://www.jianshu.com/p/48804c8bb250\n\nexport http_proxy=http://127.0.0.1:1087;export https_proxy=http://127.0.0.1:1087;\nexport no_proxy=192.168.99.0/24\n\nminikube start --docker-env http_proxy=http://192.168.99.1:1087 --docker-env https_proxy=http://192.168.99.1:1087 --docker-env no_proxy=localhost,127.0.0.1,192.168.99.0/24 --log_dir=tmp \n#linux代理参考：https://samzong.me/2017/11/17/howto-use-ssr-on-linux-terminal/\n#mac安装参考https://github.com/Unknwon/wuwen.org/issues/20\n~~~\n> 新建pod\n\n~~~\ngit clone https://github.com/acinwinstack/k8s-concept-demo.git\n\ncd k8s-concept-demo\n\nkubectl apply -f pod.yml\nkubectl apply -f service.yml\n\nkubectl cluster-info\nkubectl get svc\n~~~","tags":["kubernates,k8s,VirtualBox,minicube"]},{"url":"/2018/12/28/common-code/","content":"# 常用Code收集\n## curl post\n\n## mysql PDO操作\n\n## mysqli连接\n\n## redis cluster test demo\n\n\n"},{"url":"/2018/12/28/分布式ID实践/"},{"title":"mycat旧项目改造","url":"/2018/12/20/mycat旧项目改造1/","content":"# mycat对一个就项目数据库的改造\n## 背景\n一个项目的单表数据达到700W，考虑到日增长在2W左右，需要考虑分片，经过调研，为了系统解耦，决定采用引入中间件mycat的方案\n\n## 实践\n### 搭建实验环境\nmycat service: 10.10.10.245\n\nmysql: 10.10.10.10 & 10.10.10.9\n~~~\n1、mycat \nwget http://dl.mycat.io/1.6.6.1/Mycat-server-1.6.6.1-release-20181031195535-linux.tar.gz\n\ntar zxvf Mycat-server-1.6.6.1-release-20181031195535-linux.tar.gz\nmv Mycat... /usr/local/mycat\n\n2、mysql\n10.10.10.10为主库\n10.10.10.9为从库\n\n2.1、先在主库上操作\ndocker pull mysql:5.7\n\nmkdir -p /data/docker/mysql/3306\n\nvi mysqld.cnf\n\n[mysqld]\ngtid_mode=on\nenforce_gtid_consistency=on\nlog-bin=mysql-bin\nserver-id=1\nreplicate-ignore-db=mysql\nlog_slave_updates=1\nlower_case_table_names=1\n\ndocker run --name mlink-mysql -v /data/docker/mysql/3306:/etc/mysql/conf.d -e MYSQL_ROOT_PASSWORD=mlink7749 -e MYSQL_DATABASE=mlink -p 3306:3306 -d mysql:5.7\n\ndocker exec -it mlink-mysql /bin/bash\n\nmysql -uroot -pmlink7749\n\nCREATE USER 'repl'@'%' IDENTIFIED BY 'mlink7749';\n\nGRANT REPLICATION SLAVE ON *.* TO 'repl'@'%'; \nflush privileges; \n\n2.2、再在主库上操作\ndocker pull mysql:5.7\n\nmkdir -p /data/docker/mysql/3306\n\nvi mysqld.cnf\n\n[mysqld]\ngtid_mode=on\nenforce_gtid_consistency=on\nlog-bin=mysql-bin\nserver-id=2\nreplicate-ignore-db=mysql\nlog_slave_updates=1\nlower_case_table_names=1\n\ndocker run --name mlink-mysql -v /data/docker/mysql/3306:/etc/mysql/conf.d -e MYSQL_ROOT_PASSWORD=mlink7749 -e MYSQL_DATABASE=mlink -p 3306:3306 -d mysql:5.7\n\ndocker exec -it mlink-mysql /bin/bash\n\nmysql -uroot -pmlink7749\n\nCHANGE MASTER TO \n　　　MASTER_HOST = '10.10.10.10', \n　　　MASTER_PORT = 3308, \n　　　MASTER_USER = 'repl', \n　　　MASTER_PASSWORD = 'mlink7749', \n　　　MASTER_AUTO_POSITION = 1;\n\nstart slave;\n~~~\n## 配置mycat\n### 在mycat server上操作\n~~~ bash\ncd /usr/local/mycat/conf/\n\nvi server.xml\n\n<user name=\"root\" defaultAccount=\"true\">\n\t\t<property name=\"password\">mlink7749</property>\n\t\t<property name=\"schemas\">MLINKDB</property>\n</user>\n\n vi schema.xml\n\n<?xml version=\"1.0\"?>\n<!DOCTYPE mycat:schema SYSTEM \"schema.dtd\">\n<mycat:schema xmlns:mycat=\"http://io.mycat/\">\n\t<schema name=\"MLINKDB\" checkSQLschema=\"false\" sqlMaxLimit=\"100\" dataNode=\"dn0\">\n\t\t<table name=\"mlink_log_visitor\" dataNode=\"dn1,dn2,dn3,dn4\" rule=\"auto-sharding-long\" />\n\t</schema>\n\t<dataNode name=\"dn0\" dataHost=\"localhost\" database=\"mlink\" />\n\t<dataNode name=\"dn1\" dataHost=\"localhost1\" database=\"mlink_visitor1\" />\n\t<dataNode name=\"dn2\" dataHost=\"localhost1\" database=\"mlink_visitor2\" />\n\t<dataNode name=\"dn3\" dataHost=\"localhost1\" database=\"mlink_visitor3\" />\n\t<dataNode name=\"dn4\" dataHost=\"localhost1\" database=\"mlink_visitor4\" />\n\t<dataHost name=\"localhost1\" maxCon=\"100000\" minCon=\"10\" balance=\"0\" writeType=\"0\" dbType=\"mysql\" dbDriver=\"native\" switchType=\"1\"  slaveThreshold=\"100\">\n\t\t<heartbeat>select 1</heartbeat>\n\t\t<writeHost host=\"hostM1\" url=\"10.10.10.10:3306\" user=\"root\" password=\"mlink7749\">\n\t\t</writeHost>\n\t</dataHost>\n\t<dataHost name=\"localhost\" maxCon=\"100000\" minCon=\"10\" balance=\"0\" writeType=\"0\" dbType=\"mysql\" dbDriver=\"native\" switchType=\"1\"  slaveThreshold=\"100\">\n\t\t<heartbeat>select 1</heartbeat>\n\t\t<writeHost host=\"hostM2\" url=\"10.10.10.9:3306\" user=\"mlink\" password=\"MmcQCpbHiM\">\n\t\t</writeHost>\n\t</dataHost>\n</mycat:schema>\n~~~\n使用mycat需要清楚的几个问题：\n\n* 如何分片利于扩展和查询\n* 插入的全局分布式ID方案\n* 高可用设计\n* 分页问题\n* join\n\nvisitor表是用于记载用户访问日志的表，\n有鲜明的时间分区性质，也有冷热数据分区性质\n\n\n\n\n\n","tags":["mycat","mysql"],"categories":["mysql","db"]},{"title":"Hexo","url":"/2018/12/11/hexo/","content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","tags":["hexo","github","nodejs"],"categories":["术"]}]